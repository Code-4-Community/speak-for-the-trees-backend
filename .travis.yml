dist: xenial
os: linux
language: java
services:
  - postgresql
before_install:
  - cd common/src/main/resources/properties/
  - cp db.properties.example input.properties
  - cp db.properties.example db.properties
  - cp emailer.properties.example emailer.properties
  - cp frontend.properties.example frontend.properties
  - cp expiration.properties.example expiration.properties
  - cp jwt.properties.example jwt.properties
  - cp map.properties.example map.properties
  - awk -F" = " -v updatedVal="= " '/database.password =/{$2=updatedVal}1' input.properties > db.properties
  - rm input.properties
  - cd /home/travis/build/Code-4-Community/speak-for-the-trees-backend/
  - psql -c 'create database "speak-for-the-trees";' -U postgres
# Default installation stage runs everything as below but without spotless:check
# Tests are run as mvn test -B as part of the "script" stage
install: mvn spotless:check install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
after_success:
  - mvn clean test jacoco:report coveralls:report
before_deploy:
  - cd common/src/main/resources/properties/
  - cp db.properties.example input.properties
  - awk -F" = " -v updatedVal="= $DB_USERNAME" '/database.username =/{$2=updatedVal}1' input.properties > user.properties
  - awk -F" = " -v updatedVal="= $DB_PASSWORD" '/database.password =/{$2=updatedVal}1' user.properties > pass.properties
  - awk -F" = " -v updatedVal="= $DB_DOMAIN" '/database.url =/{$2=updatedVal}1' pass.properties > db.properties
  - rm user.properties pass.properties input.properties
  - cp map.properties.example input.properties
  - awk -F" = " -v updatedVal="= $MAP_FEATURE_LAYER_SLSSS_URL" '/feature_layer_route =/{$2=updatedVal}1' input.properties > map_url.properties
  - awk -F" = " -v updatedVal="= $MAP_CLIENT_ID" '/client_id =/{$2=updatedVal}1' map_url.properties > map_id.properties
  - awk -F" = " -v updatedVal="= $MAP_CLIENT_SECRET" '/client_secret =/{$2=updatedVal}1' map_id.properties > map.properties
  - rm input.properties map_url.properties map_id.properties
  - cp emailer.properties.example input.properties
  - awk -F" = " -v updatedVal="= $GMAIL_APP_PASSWORD" '/sendPassword =/{$2=updatedVal}1' input.properties > on.properties
  - awk -F" = " -v updatedVal="= true" '/shouldSendEmails =/{$2=updatedVal}1' on.properties > emailer.properties
  - rm input.properties on.properties
  - cp slack.properties.example input.properties
  - awk -F" = " -v updatedVal="= $SLACK_WEBHOOK_URL" '/slack_webhook_url =/{$2=updatedVal}1' input.properties > on.properties
  - awk -F" = " -v updatedVal="= true" '/enabled =/{$2=updatedVal}1' on.properties > slack.properties
  - rm input.properties on.properties
  - cd /home/travis/build/Code-4-Community/speak-for-the-trees-backend/
  - mvn clean install
  - zip build.zip Dockerfile service/target/service-1.0-SNAPSHOT-jar-with-dependencies.jar
deploy:
  provider: elasticbeanstalk
  access_key_id: AKIASXHZHSRBTUM7OU4A
  secret_access_key: $AWS_SECRET_KEY
  region: us-east-2
  app: sftt-app
  env: SfttApp-env
  bucket: elasticbeanstalk-us-east-2-187353764931
  zip_file: "build.zip"
  on:
    repo: Code-4-Community/speak-for-the-trees-backend
    branch: master
  skip_cleanup: true

